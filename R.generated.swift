//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 34 files.
  struct file {
    /// Resource file `FontAwesome.ttf`.
    static let fontAwesomeTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FontAwesome", pathExtension: "ttf")
    /// Resource file `OSLicense.html`.
    static let osLicenseHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "OSLicense", pathExtension: "html")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `activity.html`.
    static let activityHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "activity", pathExtension: "html")
    /// Resource file `article.html`.
    static let articleHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "article", pathExtension: "html")
    /// Resource file `base.html`.
    static let baseHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "base", pathExtension: "html")
    /// Resource file `base.mustache`.
    static let baseMustache = Rswift.FileResource(bundle: R.hostingBundle, name: "base", pathExtension: "mustache")
    /// Resource file `blog.css`.
    static let blogCss = Rswift.FileResource(bundle: R.hostingBundle, name: "blog", pathExtension: "css")
    /// Resource file `blog.html`.
    static let blogHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "blog", pathExtension: "html")
    /// Resource file `blog.mustache`.
    static let blogMustache = Rswift.FileResource(bundle: R.hostingBundle, name: "blog", pathExtension: "mustache")
    /// Resource file `code.css`.
    static let codeCss = Rswift.FileResource(bundle: R.hostingBundle, name: "code", pathExtension: "css")
    /// Resource file `code.html`.
    static let codeHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "code", pathExtension: "html")
    /// Resource file `detail.css`.
    static let detailCss = Rswift.FileResource(bundle: R.hostingBundle, name: "detail", pathExtension: "css")
    /// Resource file `format.html`.
    static let formatHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "format", pathExtension: "html")
    /// Resource file `git_project.css`.
    static let git_projectCss = Rswift.FileResource(bundle: R.hostingBundle, name: "git_project", pathExtension: "css")
    /// Resource file `git_project.html`.
    static let git_projectHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "git_project", pathExtension: "html")
    /// Resource file `git_project.mustache`.
    static let git_projectMustache = Rswift.FileResource(bundle: R.hostingBundle, name: "git_project", pathExtension: "mustache")
    /// Resource file `github.css`.
    static let githubCss = Rswift.FileResource(bundle: R.hostingBundle, name: "github", pathExtension: "css")
    /// Resource file `highlight.pack.js`.
    static let highlightPackJs = Rswift.FileResource(bundle: R.hostingBundle, name: "highlight.pack", pathExtension: "js")
    /// Resource file `jquery.js`.
    static let jqueryJs = Rswift.FileResource(bundle: R.hostingBundle, name: "jquery", pathExtension: "js")
    /// Resource file `newTweet.html`.
    static let newTweetHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "newTweet", pathExtension: "html")
    /// Resource file `newTweet.mustache`.
    static let newTweetMustache = Rswift.FileResource(bundle: R.hostingBundle, name: "newTweet", pathExtension: "mustache")
    /// Resource file `note.png`.
    static let notePng = Rswift.FileResource(bundle: R.hostingBundle, name: "note", pathExtension: "png")
    /// Resource file `picture.png`.
    static let picturePng = Rswift.FileResource(bundle: R.hostingBundle, name: "picture", pathExtension: "png")
    /// Resource file `recommend_tag.png`.
    static let recommend_tagPng = Rswift.FileResource(bundle: R.hostingBundle, name: "recommend_tag", pathExtension: "png")
    /// Resource file `scan.png`.
    static let scanPng = Rswift.FileResource(bundle: R.hostingBundle, name: "scan", pathExtension: "png")
    /// Resource file `search.png`.
    static let searchPng = Rswift.FileResource(bundle: R.hostingBundle, name: "search", pathExtension: "png")
    /// Resource file `shake.mp3`.
    static let shakeMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "shake", pathExtension: "mp3")
    /// Resource file `shooting.png`.
    static let shootingPng = Rswift.FileResource(bundle: R.hostingBundle, name: "shooting", pathExtension: "png")
    /// Resource file `software.html`.
    static let softwareHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "software", pathExtension: "html")
    /// Resource file `sound.png`.
    static let soundPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sound", pathExtension: "png")
    /// Resource file `subMenuItems.plist`.
    static let subMenuItemsPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "subMenuItems", pathExtension: "plist")
    /// Resource file `tweet.html`.
    static let tweetHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "tweet", pathExtension: "html")
    /// Resource file `tweetEditing.png`.
    static let tweetEditingPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tweetEditing", pathExtension: "png")
    
    /// `bundle.url(forResource: "FontAwesome", withExtension: "ttf")`
    static func fontAwesomeTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fontAwesomeTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "OSLicense", withExtension: "html")`
    static func osLicenseHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.osLicenseHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "activity", withExtension: "html")`
    static func activityHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.activityHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "article", withExtension: "html")`
    static func articleHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.articleHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "base", withExtension: "html")`
    static func baseHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.baseHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "base", withExtension: "mustache")`
    static func baseMustache(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.baseMustache
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "blog", withExtension: "css")`
    static func blogCss(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blogCss
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "blog", withExtension: "html")`
    static func blogHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blogHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "blog", withExtension: "mustache")`
    static func blogMustache(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blogMustache
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "code", withExtension: "css")`
    static func codeCss(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.codeCss
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "code", withExtension: "html")`
    static func codeHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.codeHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "detail", withExtension: "css")`
    static func detailCss(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.detailCss
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "format", withExtension: "html")`
    static func formatHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.formatHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "git_project", withExtension: "css")`
    static func git_projectCss(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.git_projectCss
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "git_project", withExtension: "html")`
    static func git_projectHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.git_projectHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "git_project", withExtension: "mustache")`
    static func git_projectMustache(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.git_projectMustache
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "github", withExtension: "css")`
    static func githubCss(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.githubCss
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "highlight.pack", withExtension: "js")`
    static func highlightPackJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.highlightPackJs
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "jquery", withExtension: "js")`
    static func jqueryJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jqueryJs
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "newTweet", withExtension: "html")`
    static func newTweetHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.newTweetHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "newTweet", withExtension: "mustache")`
    static func newTweetMustache(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.newTweetMustache
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "note", withExtension: "png")`
    static func notePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notePng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "picture", withExtension: "png")`
    static func picturePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.picturePng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "recommend_tag", withExtension: "png")`
    static func recommend_tagPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recommend_tagPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "scan", withExtension: "png")`
    static func scanPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.scanPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "search", withExtension: "png")`
    static func searchPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.searchPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "shake", withExtension: "mp3")`
    static func shakeMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shakeMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "shooting", withExtension: "png")`
    static func shootingPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shootingPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "software", withExtension: "html")`
    static func softwareHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.softwareHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "sound", withExtension: "png")`
    static func soundPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.soundPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "subMenuItems", withExtension: "plist")`
    static func subMenuItemsPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.subMenuItemsPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "tweet", withExtension: "html")`
    static func tweetHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tweetHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "tweetEditing", withExtension: "png")`
    static func tweetEditingPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tweetEditingPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `FontAwesome`.
    static let fontAwesome = Rswift.FontResource(fontName: "FontAwesome")
    
    /// `UIFont(name: "FontAwesome", size: ...)`
    static func fontAwesome(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fontAwesome, size: size)
    }
    
    static func validate() throws {
      if R.font.fontAwesome(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FontAwesome' could not be loaded, is 'FontAwesome.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 310 images.
  struct image {
    /// Image `@_icon`.
    static let _icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "@_icon")
    /// Image `ABC_icon1`.
    static let abc_icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ABC_icon1")
    /// Image `ABC_icon`.
    static let abc_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ABC_icon")
    /// Image `Bold`.
    static let bold = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bold")
    /// Image `Center`.
    static let center = Rswift.ImageResource(bundle: R.hostingBundle, name: "Center")
    /// Image `HUD-done`.
    static let hudDone = Rswift.ImageResource(bundle: R.hostingBundle, name: "HUD-done")
    /// Image `HUD-error`.
    static let hudError = Rswift.ImageResource(bundle: R.hostingBundle, name: "HUD-error")
    /// Image `Image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "Image")
    /// Image `Itali`.
    static let itali = Rswift.ImageResource(bundle: R.hostingBundle, name: "Itali")
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `Left`.
    static let left = Rswift.ImageResource(bundle: R.hostingBundle, name: "Left")
    /// Image `Line-1`.
    static let line1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Line-1")
    /// Image `Line`.
    static let line = Rswift.ImageResource(bundle: R.hostingBundle, name: "Line")
    /// Image `Right`.
    static let right = Rswift.ImageResource(bundle: R.hostingBundle, name: "Right")
    /// Image `audioTweet`.
    static let audioTweet = Rswift.ImageResource(bundle: R.hostingBundle, name: "audioTweet")
    /// Image `avatar_mask`.
    static let avatar_mask = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_mask")
    /// Image `bg_balloon_left`.
    static let bg_balloon_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_balloon_left")
    /// Image `bg_balloon_right`.
    static let bg_balloon_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_balloon_right")
    /// Image `bg_banner_title`.
    static let bg_banner_title = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_banner_title")
    /// Image `bg_fans_normal`.
    static let bg_fans_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_fans_normal")
    /// Image `bg_fans_pressed`.
    static let bg_fans_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_fans_pressed")
    /// Image `bg_follow_normal`.
    static let bg_follow_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_follow_normal")
    /// Image `bg_follow_pressed`.
    static let bg_follow_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_follow_pressed")
    /// Image `bg_format`.
    static let bg_format = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_format")
    /// Image `bg_login_thirdpart`.
    static let bg_login_thirdpart = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_login_thirdpart")
    /// Image `bg_login`.
    static let bg_login = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_login")
    /// Image `bg_my-1`.
    static let bg_my1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my-1")
    /// Image `bg_my_dark_1`.
    static let bg_my_dark_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my_dark_1")
    /// Image `bg_my_dark`.
    static let bg_my_dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my_dark")
    /// Image `bg_my`.
    static let bg_my = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my")
    /// Image `bg_popover`.
    static let bg_popover = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_popover")
    /// Image `bg_ticket_event_bottom`.
    static let bg_ticket_event_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_ticket_event_bottom")
    /// Image `bg_ticket_event_top`.
    static let bg_ticket_event_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_ticket_event_top")
    /// Image `bg_topic_1`.
    static let bg_topic_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_topic_1")
    /// Image `bg_topic_2`.
    static let bg_topic_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_topic_2")
    /// Image `bg_topic_3`.
    static let bg_topic_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_topic_3")
    /// Image `bg_topic_4`.
    static let bg_topic_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_topic_4")
    /// Image `bg_topic_5`.
    static let bg_topic_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_topic_5")
    /// Image `bowtie`.
    static let bowtie = Rswift.ImageResource(bundle: R.hostingBundle, name: "bowtie")
    /// Image `btn_at_normal`.
    static let btn_at_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_at_normal")
    /// Image `btn_at_pressed`.
    static let btn_at_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_at_pressed")
    /// Image `btn_back_normal`.
    static let btn_back_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_back_normal")
    /// Image `btn_download`.
    static let btn_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_download")
    /// Image `btn_emoji_normal`.
    static let btn_emoji_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_emoji_normal")
    /// Image `btn_emoji_pressed`.
    static let btn_emoji_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_emoji_pressed")
    /// Image `btn_follow_normal`.
    static let btn_follow_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_follow_normal")
    /// Image `btn_follow_pressed`.
    static let btn_follow_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_follow_pressed")
    /// Image `btn_following_both_normal`.
    static let btn_following_both_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_following_both_normal")
    /// Image `btn_following_both_pressed`.
    static let btn_following_both_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_following_both_pressed")
    /// Image `btn_following_normal`.
    static let btn_following_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_following_normal")
    /// Image `btn_following_pressed`.
    static let btn_following_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_following_pressed")
    /// Image `btn_gender_female_actived`.
    static let btn_gender_female_actived = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_gender_female_actived")
    /// Image `btn_gender_female_normal`.
    static let btn_gender_female_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_gender_female_normal")
    /// Image `btn_gender_male_actived`.
    static let btn_gender_male_actived = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_gender_male_actived")
    /// Image `btn_gender_male_normal`.
    static let btn_gender_male_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_gender_male_normal")
    /// Image `btn_login_refresh`.
    static let btn_login_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_login_refresh")
    /// Image `btn_my_setting`.
    static let btn_my_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_my_setting")
    /// Image `btn_pay_normal`.
    static let btn_pay_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_pay_normal")
    /// Image `btn_pm_normal`.
    static let btn_pm_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_pm_normal")
    /// Image `btn_pm_pressed`.
    static let btn_pm_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_pm_pressed")
    /// Image `btn_qrcode`.
    static let btn_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_qrcode")
    /// Image `btn_shake_gift_actived`.
    static let btn_shake_gift_actived = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_shake_gift_actived")
    /// Image `btn_shake_gift`.
    static let btn_shake_gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_shake_gift")
    /// Image `btn_shake_info_actived`.
    static let btn_shake_info_actived = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_shake_info_actived")
    /// Image `btn_shake_info`.
    static let btn_shake_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_shake_info")
    /// Image `bubble`.
    static let bubble = Rswift.ImageResource(bundle: R.hostingBundle, name: "bubble")
    /// Image `checkbox_checked`.
    static let checkbox_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_checked")
    /// Image `checkbox_normal`.
    static let checkbox_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_normal")
    /// Image `checkbox_off`.
    static let checkbox_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_off")
    /// Image `checkbox_on`.
    static let checkbox_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_on")
    /// Image `clear_icon`.
    static let clear_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "clear_icon")
    /// Image `comment_icon`.
    static let comment_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment_icon")
    /// Image `dancer`.
    static let dancer = Rswift.ImageResource(bundle: R.hostingBundle, name: "dancer")
    /// Image `default-portrait`.
    static let defaultPortrait = Rswift.ImageResource(bundle: R.hostingBundle, name: "default-portrait")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `discover-activities`.
    static let discoverActivities = Rswift.ImageResource(bundle: R.hostingBundle, name: "discover-activities")
    /// Image `discover-events`.
    static let discoverEvents = Rswift.ImageResource(bundle: R.hostingBundle, name: "discover-events")
    /// Image `discover-scan`.
    static let discoverScan = Rswift.ImageResource(bundle: R.hostingBundle, name: "discover-scan")
    /// Image `discover-search`.
    static let discoverSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "discover-search")
    /// Image `discover-shake`.
    static let discoverShake = Rswift.ImageResource(bundle: R.hostingBundle, name: "discover-shake")
    /// Image `event_cover_default`.
    static let event_cover_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "event_cover_default")
    /// Image `feedback_selected`.
    static let feedback_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedback_selected")
    /// Image `feedback_unSelected`.
    static let feedback_unSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedback_unSelected")
    /// Image `feelsgood`.
    static let feelsgood = Rswift.ImageResource(bundle: R.hostingBundle, name: "feelsgood")
    /// Image `finnadie`.
    static let finnadie = Rswift.ImageResource(bundle: R.hostingBundle, name: "finnadie")
    /// Image `fork`.
    static let fork = Rswift.ImageResource(bundle: R.hostingBundle, name: "fork")
    /// Image `form_checkbox_checked`.
    static let form_checkbox_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "form_checkbox_checked")
    /// Image `form_checkbox_normal`.
    static let form_checkbox_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "form_checkbox_normal")
    /// Image `fu`.
    static let fu = Rswift.ImageResource(bundle: R.hostingBundle, name: "fu")
    /// Image `gif`.
    static let gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif")
    /// Image `goberserk`.
    static let goberserk = Rswift.ImageResource(bundle: R.hostingBundle, name: "goberserk")
    /// Image `godmode`.
    static let godmode = Rswift.ImageResource(bundle: R.hostingBundle, name: "godmode")
    /// Image `goldengate`.
    static let goldengate = Rswift.ImageResource(bundle: R.hostingBundle, name: "goldengate")
    /// Image `ic_Forward`.
    static let ic_Forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Forward")
    /// Image `ic_action_browser`.
    static let ic_action_browser = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_browser")
    /// Image `ic_action_moments`.
    static let ic_action_moments = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_moments")
    /// Image `ic_action_more`.
    static let ic_action_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_more")
    /// Image `ic_action_preview`.
    static let ic_action_preview = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_preview")
    /// Image `ic_action_tweet`.
    static let ic_action_tweet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_tweet")
    /// Image `ic_action_url`.
    static let ic_action_url = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_url")
    /// Image `ic_arrow_down`.
    static let ic_arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_down")
    /// Image `ic_arrow_right`.
    static let ic_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right")
    /// Image `ic_branch`.
    static let ic_branch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_branch")
    /// Image `ic_calendar`.
    static let ic_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar")
    /// Image `ic_comment_30`.
    static let ic_comment_30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment_30")
    /// Image `ic_comment_3_appbar`.
    static let ic_comment_3_appbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment_3_appbar")
    /// Image `ic_comment_40-1`.
    static let ic_comment_401 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment_40-1")
    /// Image `ic_comment_40-2`.
    static let ic_comment_402 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment_40-2")
    /// Image `ic_comment_40_pressed-1`.
    static let ic_comment_40_pressed1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment_40_pressed-1")
    /// Image `ic_comment_40_pressed`.
    static let ic_comment_40_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment_40_pressed")
    /// Image `ic_comment_40`.
    static let ic_comment_40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment_40")
    /// Image `ic_comment_4_appbar`.
    static let ic_comment_4_appbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment_4_appbar")
    /// Image `ic_comment`.
    static let ic_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment")
    /// Image `ic_copy-1`.
    static let ic_copy1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_copy-1")
    /// Image `ic_copy`.
    static let ic_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_copy")
    /// Image `ic_discover_find-1`.
    static let ic_discover_find1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_discover_find-1")
    /// Image `ic_discover_find`.
    static let ic_discover_find = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_discover_find")
    /// Image `ic_discover_gist`.
    static let ic_discover_gist = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_discover_gist")
    /// Image `ic_discover_git`.
    static let ic_discover_git = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_discover_git")
    /// Image `ic_discover_nearby`.
    static let ic_discover_nearby = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_discover_nearby")
    /// Image `ic_discover_scan`.
    static let ic_discover_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_discover_scan")
    /// Image `ic_discover_shake`.
    static let ic_discover_shake = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_discover_shake")
    /// Image `ic_discover_softwares`.
    static let ic_discover_softwares = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_discover_softwares")
    /// Image `ic_documents`.
    static let ic_documents = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_documents")
    /// Image `ic_fav_light_normall`.
    static let ic_fav_light_normall = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fav_light_normall")
    /// Image `ic_fav_normal`.
    static let ic_fav_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fav_normal")
    /// Image `ic_fav_pressed`.
    static let ic_fav_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fav_pressed")
    /// Image `ic_faved_normal`.
    static let ic_faved_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_faved_normal")
    /// Image `ic_faved_pressed`.
    static let ic_faved_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_faved_pressed")
    /// Image `ic_female`.
    static let ic_female = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_female")
    /// Image `ic_file`.
    static let ic_file = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file")
    /// Image `ic_folder`.
    static let ic_folder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_folder")
    /// Image `ic_fork`.
    static let ic_fork = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fork")
    /// Image `ic_format_align_center`.
    static let ic_format_align_center = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_align_center")
    /// Image `ic_format_align_left`.
    static let ic_format_align_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_align_left")
    /// Image `ic_format_align_right`.
    static let ic_format_align_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_align_right")
    /// Image `ic_format_align`.
    static let ic_format_align = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_align")
    /// Image `ic_format_bold`.
    static let ic_format_bold = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_bold")
    /// Image `ic_format_catgory_highlight`.
    static let ic_format_catgory_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_catgory_highlight")
    /// Image `ic_format_catgory`.
    static let ic_format_catgory = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_catgory")
    /// Image `ic_format_h1`.
    static let ic_format_h1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_h1")
    /// Image `ic_format_h2`.
    static let ic_format_h2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_h2")
    /// Image `ic_format_h3`.
    static let ic_format_h3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_h3")
    /// Image `ic_format_headline`.
    static let ic_format_headline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_headline")
    /// Image `ic_format_italic`.
    static let ic_format_italic = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_italic")
    /// Image `ic_format_keyboard`.
    static let ic_format_keyboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_keyboard")
    /// Image `ic_format_line`.
    static let ic_format_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_line")
    /// Image `ic_format_style`.
    static let ic_format_style = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_format_style")
    /// Image `ic_label_new`.
    static let ic_label_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_label_new")
    /// Image `ic_label_originate`.
    static let ic_label_originate = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_label_originate")
    /// Image `ic_label_recommend`.
    static let ic_label_recommend = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_label_recommend")
    /// Image `ic_label_reprint`.
    static let ic_label_reprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_label_reprint")
    /// Image `ic_label_today`.
    static let ic_label_today = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_label_today")
    /// Image `ic_located`.
    static let ic_located = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_located")
    /// Image `ic_location`.
    static let ic_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location")
    /// Image `ic_login_3party_qq`.
    static let ic_login_3party_qq = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_3party_qq")
    /// Image `ic_login_3party_wechat`.
    static let ic_login_3party_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_3party_wechat")
    /// Image `ic_login_3party_weibo`.
    static let ic_login_3party_weibo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_3party_weibo")
    /// Image `ic_login_password`.
    static let ic_login_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_password")
    /// Image `ic_login_username`.
    static let ic_login_username = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_username")
    /// Image `ic_logo_3party_csdn`.
    static let ic_logo_3party_csdn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo_3party_csdn")
    /// Image `ic_male`.
    static let ic_male = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_male")
    /// Image `ic_more_normal`.
    static let ic_more_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_normal")
    /// Image `ic_my_blog`.
    static let ic_my_blog = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_blog")
    /// Image `ic_my_event`.
    static let ic_my_event = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_event")
    /// Image `ic_my_messege`.
    static let ic_my_messege = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_messege")
    /// Image `ic_my_profile`.
    static let ic_my_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_profile")
    /// Image `ic_my_question`.
    static let ic_my_question = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_question")
    /// Image `ic_my_setting`.
    static let ic_my_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_setting")
    /// Image `ic_my_team`.
    static let ic_my_team = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_team")
    /// Image `ic_nav_add_actived`.
    static let ic_nav_add_actived = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nav_add_actived")
    /// Image `ic_nav_add`.
    static let ic_nav_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nav_add")
    /// Image `ic_pm_file`.
    static let ic_pm_file = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pm_file")
    /// Image `ic_quote_left`.
    static let ic_quote_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_quote_left")
    /// Image `ic_quote_right`.
    static let ic_quote_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_quote_right")
    /// Image `ic_quote`.
    static let ic_quote = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_quote")
    /// Image `ic_shake`.
    static let ic_shake = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_shake")
    /// Image `ic_share_black_normal-1`.
    static let ic_share_black_normal1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_black_normal-1")
    /// Image `ic_share_black_normal-2`.
    static let ic_share_black_normal2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_black_normal-2")
    /// Image `ic_share_black_normal-3`.
    static let ic_share_black_normal3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_black_normal-3")
    /// Image `ic_share_black_normal`.
    static let ic_share_black_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_black_normal")
    /// Image `ic_share_black_pressed-1`.
    static let ic_share_black_pressed1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_black_pressed-1")
    /// Image `ic_share_black_pressed-2`.
    static let ic_share_black_pressed2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_black_pressed-2")
    /// Image `ic_share_black_pressed-3`.
    static let ic_share_black_pressed3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_black_pressed-3")
    /// Image `ic_share_black_pressed`.
    static let ic_share_black_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_black_pressed")
    /// Image `ic_signup_captcha`.
    static let ic_signup_captcha = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_signup_captcha")
    /// Image `ic_signup_sms`.
    static let ic_signup_sms = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_signup_sms")
    /// Image `ic_singup_mobile`.
    static let ic_singup_mobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_singup_mobile")
    /// Image `ic_star`.
    static let ic_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star")
    /// Image `ic_subscribe`.
    static let ic_subscribe = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_subscribe")
    /// Image `ic_thumbup_actived`.
    static let ic_thumbup_actived = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_thumbup_actived")
    /// Image `ic_thumbup_normal`.
    static let ic_thumbup_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_thumbup_normal")
    /// Image `ic_ticket`.
    static let ic_ticket = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ticket")
    /// Image `ic_tip_fail`.
    static let ic_tip_fail = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tip_fail")
    /// Image `ic_tip_smile`.
    static let ic_tip_smile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tip_smile")
    /// Image `ic_tweet_add`.
    static let ic_tweet_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tweet_add")
    /// Image `ic_unsubscribe`.
    static let ic_unsubscribe = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unsubscribe")
    /// Image `ic_user_add-1`.
    static let ic_user_add1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_add-1")
    /// Image `ic_user_add`.
    static let ic_user_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_add")
    /// Image `ic_view`.
    static let ic_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_view")
    /// Image `ic_vote_down_big_actived`.
    static let ic_vote_down_big_actived = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vote_down_big_actived")
    /// Image `ic_vote_down_big_normal`.
    static let ic_vote_down_big_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vote_down_big_normal")
    /// Image `ic_vote_down`.
    static let ic_vote_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vote_down")
    /// Image `ic_vote_up_big_actived`.
    static let ic_vote_up_big_actived = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vote_up_big_actived")
    /// Image `ic_vote_up_big_normal`.
    static let ic_vote_up_big_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vote_up_big_normal")
    /// Image `ic_vote_up`.
    static let ic_vote_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vote_up")
    /// Image `ic_vote`.
    static let ic_vote = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vote")
    /// Image `ic_website`.
    static let ic_website = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_website")
    /// Image `icon_event_status_attend`.
    static let icon_event_status_attend = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_event_status_attend")
    /// Image `icon_event_status_checked`.
    static let icon_event_status_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_event_status_checked")
    /// Image `icon_event_status_over`.
    static let icon_event_status_over = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_event_status_over")
    /// Image `image_add_sel`.
    static let image_add_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_add_sel")
    /// Image `img_icon`.
    static let img_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_icon")
    /// Image `ios_120`.
    static let ios_120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ios_120")
    /// Image `label_best_answer`.
    static let label_best_answer = Rswift.ImageResource(bundle: R.hostingBundle, name: "label_best_answer")
    /// Image `language`.
    static let language = Rswift.ImageResource(bundle: R.hostingBundle, name: "language")
    /// Image `loading_1`.
    static let loading_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading_1")
    /// Image `loading_2`.
    static let loading_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading_2")
    /// Image `loading_3`.
    static let loading_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading_3")
    /// Image `loading`.
    static let loading = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading")
    /// Image `logo_osc_share`.
    static let logo_osc_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_osc_share")
    /// Image `logo_osc`.
    static let logo_osc = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_osc")
    /// Image `logo_software_default`.
    static let logo_software_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_software_default")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `me-blog`.
    static let meBlog = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-blog")
    /// Image `me-feedback`.
    static let meFeedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-feedback")
    /// Image `me-message`.
    static let meMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-message")
    /// Image `me-team`.
    static let meTeam = Rswift.ImageResource(bundle: R.hostingBundle, name: "me-team")
    /// Image `navigationbar-search`.
    static let navigationbarSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar-search")
    /// Image `navigationbar-sidebar`.
    static let navigationbarSidebar = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar-sidebar")
    /// Image `neckbeard`.
    static let neckbeard = Rswift.ImageResource(bundle: R.hostingBundle, name: "neckbeard")
    /// Image `octocat`.
    static let octocat = Rswift.ImageResource(bundle: R.hostingBundle, name: "octocat")
    /// Image `overlaygraphic`.
    static let overlaygraphic = Rswift.ImageResource(bundle: R.hostingBundle, name: "overlaygraphic")
    /// Image `page_icon_empty`.
    static let page_icon_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "page_icon_empty")
    /// Image `picture_download`.
    static let picture_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "picture_download")
    /// Image `portrait_loading`.
    static let portrait_loading = Rswift.ImageResource(bundle: R.hostingBundle, name: "portrait_loading")
    /// Image `post_icon`.
    static let post_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "post_icon")
    /// Image `qq-icon`.
    static let qqIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "qq-icon")
    /// Image `qrcode`.
    static let qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode")
    /// Image `radiobox_off`.
    static let radiobox_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "radiobox_off")
    /// Image `radiobox_on`.
    static let radiobox_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "radiobox_on")
    /// Image `rage1`.
    static let rage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rage1")
    /// Image `rage2`.
    static let rage2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rage2")
    /// Image `rage3`.
    static let rage3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rage3")
    /// Image `rage4`.
    static let rage4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rage4")
    /// Image `send`.
    static let send = Rswift.ImageResource(bundle: R.hostingBundle, name: "send")
    /// Image `shake`.
    static let shake = Rswift.ImageResource(bundle: R.hostingBundle, name: "shake")
    /// Image `shaking`.
    static let shaking = Rswift.ImageResource(bundle: R.hostingBundle, name: "shaking")
    /// Image `sidemenu-day`.
    static let sidemenuDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "sidemenu-day")
    /// Image `sidemenu-night`.
    static let sidemenuNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "sidemenu-night")
    /// Image `sidemenu-software`.
    static let sidemenuSoftware = Rswift.ImageResource(bundle: R.hostingBundle, name: "sidemenu-software")
    /// Image `sidemenu_QA`.
    static let sidemenu_QA = Rswift.ImageResource(bundle: R.hostingBundle, name: "sidemenu_QA")
    /// Image `sidemenu_blog`.
    static let sidemenu_blog = Rswift.ImageResource(bundle: R.hostingBundle, name: "sidemenu_blog")
    /// Image `sidemenu_setting`.
    static let sidemenu_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "sidemenu_setting")
    /// Image `signup_select`.
    static let signup_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "signup_select")
    /// Image `squirrel`.
    static let squirrel = Rswift.ImageResource(bundle: R.hostingBundle, name: "squirrel")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `style_icon`.
    static let style_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "style_icon")
    /// Image `suspect`.
    static let suspect = Rswift.ImageResource(bundle: R.hostingBundle, name: "suspect")
    /// Image `tabbar-discover-selected`.
    static let tabbarDiscoverSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-discover-selected")
    /// Image `tabbar-discover`.
    static let tabbarDiscover = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-discover")
    /// Image `tabbar-me-selected`.
    static let tabbarMeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-me-selected")
    /// Image `tabbar-me`.
    static let tabbarMe = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-me")
    /// Image `tabbar-more`.
    static let tabbarMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-more")
    /// Image `tabbar-news-selected`.
    static let tabbarNewsSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-news-selected")
    /// Image `tabbar-news`.
    static let tabbarNews = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-news")
    /// Image `tabbar-tweet-selected`.
    static let tabbarTweetSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-tweet-selected")
    /// Image `tabbar-tweet`.
    static let tabbarTweet = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-tweet")
    /// Image `team-creaete`.
    static let teamCreaete = Rswift.ImageResource(bundle: R.hostingBundle, name: "team-creaete")
    /// Image `team-create`.
    static let teamCreate = Rswift.ImageResource(bundle: R.hostingBundle, name: "team-create")
    /// Image `tips_subscribe`.
    static let tips_subscribe = Rswift.ImageResource(bundle: R.hostingBundle, name: "tips_subscribe")
    /// Image `toolbar-barSwitch`.
    static let toolbarBarSwitch = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-barSwitch")
    /// Image `toolbar-comments`.
    static let toolbarComments = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-comments")
    /// Image `toolbar-editingComment`.
    static let toolbarEditingComment = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-editingComment")
    /// Image `toolbar-emoji2`.
    static let toolbarEmoji2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-emoji2")
    /// Image `toolbar-emoji`.
    static let toolbarEmoji = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-emoji")
    /// Image `toolbar-image_enable`.
    static let toolbarImage_enable = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-image_enable")
    /// Image `toolbar-image`.
    static let toolbarImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-image")
    /// Image `toolbar-keyboardUp`.
    static let toolbarKeyboardUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-keyboardUp")
    /// Image `toolbar-mention`.
    static let toolbarMention = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-mention")
    /// Image `toolbar-reference`.
    static let toolbarReference = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-reference")
    /// Image `toolbar-report`.
    static let toolbarReport = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-report")
    /// Image `toolbar-separatorline`.
    static let toolbarSeparatorline = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-separatorline")
    /// Image `toolbar-share`.
    static let toolbarShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-share")
    /// Image `toolbar-star`.
    static let toolbarStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-star")
    /// Image `toolbar-starred`.
    static let toolbarStarred = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-starred")
    /// Image `toolbar-text`.
    static let toolbarText = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-text")
    /// Image `trollface`.
    static let trollface = Rswift.ImageResource(bundle: R.hostingBundle, name: "trollface")
    /// Image `user-background-320-dark`.
    static let userBackground320Dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-background-320-dark")
    /// Image `user-background-320`.
    static let userBackground320 = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-background-320")
    /// Image `user-background-375-dark`.
    static let userBackground375Dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-background-375-dark")
    /// Image `user-background-375`.
    static let userBackground375 = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-background-375")
    /// Image `user-background-dark`.
    static let userBackgroundDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-background-dark")
    /// Image `user-background`.
    static let userBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-background")
    /// Image `userinfo_icon_female`.
    static let userinfo_icon_female = Rswift.ImageResource(bundle: R.hostingBundle, name: "userinfo_icon_female")
    /// Image `userinfo_icon_male`.
    static let userinfo_icon_male = Rswift.ImageResource(bundle: R.hostingBundle, name: "userinfo_icon_male")
    /// Image `voice_0`.
    static let voice_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_0")
    /// Image `voice_1`.
    static let voice_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_1")
    /// Image `voice_2`.
    static let voice_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_2")
    /// Image `voice_3`.
    static let voice_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_3")
    /// Image `voice_delete`.
    static let voice_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_delete")
    /// Image `voice_pause`.
    static let voice_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_pause")
    /// Image `voice_play`.
    static let voice_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_play")
    /// Image `voice_record`.
    static let voice_record = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_record")
    /// Image `watch`.
    static let watch = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch")
    /// Image `wechat-icon`.
    static let wechatIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "wechat-icon")
    /// Image `weibo-icon`.
    static let weiboIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "weibo-icon")
    /// Image `widget-original`.
    static let widgetOriginal = Rswift.ImageResource(bundle: R.hostingBundle, name: "widget-original")
    /// Image `widget_repost`.
    static let widget_repost = Rswift.ImageResource(bundle: R.hostingBundle, name: "widget_repost")
    /// Image `widget_taday`.
    static let widget_taday = Rswift.ImageResource(bundle: R.hostingBundle, name: "widget_taday")
    
    /// `UIImage(named: "@_icon", bundle: ..., traitCollection: ...)`
    static func _icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ABC_icon", bundle: ..., traitCollection: ...)`
    static func abc_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.abc_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ABC_icon1", bundle: ..., traitCollection: ...)`
    static func abc_icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.abc_icon1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Bold", bundle: ..., traitCollection: ...)`
    static func bold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bold, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Center", bundle: ..., traitCollection: ...)`
    static func center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HUD-done", bundle: ..., traitCollection: ...)`
    static func hudDone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hudDone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HUD-error", bundle: ..., traitCollection: ...)`
    static func hudError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hudError, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Itali", bundle: ..., traitCollection: ...)`
    static func itali(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.itali, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Left", bundle: ..., traitCollection: ...)`
    static func left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Line", bundle: ..., traitCollection: ...)`
    static func line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Line-1", bundle: ..., traitCollection: ...)`
    static func line1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Right", bundle: ..., traitCollection: ...)`
    static func right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "audioTweet", bundle: ..., traitCollection: ...)`
    static func audioTweet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.audioTweet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "avatar_mask", bundle: ..., traitCollection: ...)`
    static func avatar_mask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_mask, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_balloon_left", bundle: ..., traitCollection: ...)`
    static func bg_balloon_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_balloon_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_balloon_right", bundle: ..., traitCollection: ...)`
    static func bg_balloon_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_balloon_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_banner_title", bundle: ..., traitCollection: ...)`
    static func bg_banner_title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_banner_title, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_fans_normal", bundle: ..., traitCollection: ...)`
    static func bg_fans_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_fans_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_fans_pressed", bundle: ..., traitCollection: ...)`
    static func bg_fans_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_fans_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_follow_normal", bundle: ..., traitCollection: ...)`
    static func bg_follow_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_follow_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_follow_pressed", bundle: ..., traitCollection: ...)`
    static func bg_follow_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_follow_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_format", bundle: ..., traitCollection: ...)`
    static func bg_format(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_format, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_login", bundle: ..., traitCollection: ...)`
    static func bg_login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_login, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_login_thirdpart", bundle: ..., traitCollection: ...)`
    static func bg_login_thirdpart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_login_thirdpart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_my", bundle: ..., traitCollection: ...)`
    static func bg_my(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_my-1", bundle: ..., traitCollection: ...)`
    static func bg_my1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_my_dark", bundle: ..., traitCollection: ...)`
    static func bg_my_dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my_dark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_my_dark_1", bundle: ..., traitCollection: ...)`
    static func bg_my_dark_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my_dark_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_popover", bundle: ..., traitCollection: ...)`
    static func bg_popover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_popover, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_ticket_event_bottom", bundle: ..., traitCollection: ...)`
    static func bg_ticket_event_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_ticket_event_bottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_ticket_event_top", bundle: ..., traitCollection: ...)`
    static func bg_ticket_event_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_ticket_event_top, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_topic_1", bundle: ..., traitCollection: ...)`
    static func bg_topic_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_topic_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_topic_2", bundle: ..., traitCollection: ...)`
    static func bg_topic_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_topic_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_topic_3", bundle: ..., traitCollection: ...)`
    static func bg_topic_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_topic_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_topic_4", bundle: ..., traitCollection: ...)`
    static func bg_topic_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_topic_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_topic_5", bundle: ..., traitCollection: ...)`
    static func bg_topic_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_topic_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bowtie", bundle: ..., traitCollection: ...)`
    static func bowtie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bowtie, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_at_normal", bundle: ..., traitCollection: ...)`
    static func btn_at_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_at_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_at_pressed", bundle: ..., traitCollection: ...)`
    static func btn_at_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_at_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_back_normal", bundle: ..., traitCollection: ...)`
    static func btn_back_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_back_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_download", bundle: ..., traitCollection: ...)`
    static func btn_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_emoji_normal", bundle: ..., traitCollection: ...)`
    static func btn_emoji_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_emoji_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_emoji_pressed", bundle: ..., traitCollection: ...)`
    static func btn_emoji_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_emoji_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_follow_normal", bundle: ..., traitCollection: ...)`
    static func btn_follow_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_follow_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_follow_pressed", bundle: ..., traitCollection: ...)`
    static func btn_follow_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_follow_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_following_both_normal", bundle: ..., traitCollection: ...)`
    static func btn_following_both_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_following_both_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_following_both_pressed", bundle: ..., traitCollection: ...)`
    static func btn_following_both_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_following_both_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_following_normal", bundle: ..., traitCollection: ...)`
    static func btn_following_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_following_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_following_pressed", bundle: ..., traitCollection: ...)`
    static func btn_following_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_following_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_gender_female_actived", bundle: ..., traitCollection: ...)`
    static func btn_gender_female_actived(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_gender_female_actived, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_gender_female_normal", bundle: ..., traitCollection: ...)`
    static func btn_gender_female_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_gender_female_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_gender_male_actived", bundle: ..., traitCollection: ...)`
    static func btn_gender_male_actived(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_gender_male_actived, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_gender_male_normal", bundle: ..., traitCollection: ...)`
    static func btn_gender_male_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_gender_male_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_login_refresh", bundle: ..., traitCollection: ...)`
    static func btn_login_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_login_refresh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_my_setting", bundle: ..., traitCollection: ...)`
    static func btn_my_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_my_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_pay_normal", bundle: ..., traitCollection: ...)`
    static func btn_pay_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_pay_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_pm_normal", bundle: ..., traitCollection: ...)`
    static func btn_pm_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_pm_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_pm_pressed", bundle: ..., traitCollection: ...)`
    static func btn_pm_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_pm_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_qrcode", bundle: ..., traitCollection: ...)`
    static func btn_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_shake_gift", bundle: ..., traitCollection: ...)`
    static func btn_shake_gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_shake_gift, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_shake_gift_actived", bundle: ..., traitCollection: ...)`
    static func btn_shake_gift_actived(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_shake_gift_actived, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_shake_info", bundle: ..., traitCollection: ...)`
    static func btn_shake_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_shake_info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_shake_info_actived", bundle: ..., traitCollection: ...)`
    static func btn_shake_info_actived(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_shake_info_actived, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bubble", bundle: ..., traitCollection: ...)`
    static func bubble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bubble, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_checked", bundle: ..., traitCollection: ...)`
    static func checkbox_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_checked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_normal", bundle: ..., traitCollection: ...)`
    static func checkbox_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_off", bundle: ..., traitCollection: ...)`
    static func checkbox_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_on", bundle: ..., traitCollection: ...)`
    static func checkbox_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clear_icon", bundle: ..., traitCollection: ...)`
    static func clear_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clear_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "comment_icon", bundle: ..., traitCollection: ...)`
    static func comment_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dancer", bundle: ..., traitCollection: ...)`
    static func dancer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dancer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default-portrait", bundle: ..., traitCollection: ...)`
    static func defaultPortrait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultPortrait, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "discover-activities", bundle: ..., traitCollection: ...)`
    static func discoverActivities(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discoverActivities, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "discover-events", bundle: ..., traitCollection: ...)`
    static func discoverEvents(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discoverEvents, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "discover-scan", bundle: ..., traitCollection: ...)`
    static func discoverScan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discoverScan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "discover-search", bundle: ..., traitCollection: ...)`
    static func discoverSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discoverSearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "discover-shake", bundle: ..., traitCollection: ...)`
    static func discoverShake(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discoverShake, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "event_cover_default", bundle: ..., traitCollection: ...)`
    static func event_cover_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.event_cover_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "feedback_selected", bundle: ..., traitCollection: ...)`
    static func feedback_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedback_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "feedback_unSelected", bundle: ..., traitCollection: ...)`
    static func feedback_unSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedback_unSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "feelsgood", bundle: ..., traitCollection: ...)`
    static func feelsgood(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feelsgood, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "finnadie", bundle: ..., traitCollection: ...)`
    static func finnadie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.finnadie, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fork", bundle: ..., traitCollection: ...)`
    static func fork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fork, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "form_checkbox_checked", bundle: ..., traitCollection: ...)`
    static func form_checkbox_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.form_checkbox_checked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "form_checkbox_normal", bundle: ..., traitCollection: ...)`
    static func form_checkbox_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.form_checkbox_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fu", bundle: ..., traitCollection: ...)`
    static func fu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif", bundle: ..., traitCollection: ...)`
    static func gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "goberserk", bundle: ..., traitCollection: ...)`
    static func goberserk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goberserk, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "godmode", bundle: ..., traitCollection: ...)`
    static func godmode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.godmode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "goldengate", bundle: ..., traitCollection: ...)`
    static func goldengate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goldengate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_Forward", bundle: ..., traitCollection: ...)`
    static func ic_Forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Forward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_browser", bundle: ..., traitCollection: ...)`
    static func ic_action_browser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_browser, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_moments", bundle: ..., traitCollection: ...)`
    static func ic_action_moments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_moments, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_more", bundle: ..., traitCollection: ...)`
    static func ic_action_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_preview", bundle: ..., traitCollection: ...)`
    static func ic_action_preview(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_preview, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_tweet", bundle: ..., traitCollection: ...)`
    static func ic_action_tweet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_tweet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_url", bundle: ..., traitCollection: ...)`
    static func ic_action_url(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_url, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow_down", bundle: ..., traitCollection: ...)`
    static func ic_arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_branch", bundle: ..., traitCollection: ...)`
    static func ic_branch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_branch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calendar", bundle: ..., traitCollection: ...)`
    static func ic_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_comment", bundle: ..., traitCollection: ...)`
    static func ic_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_comment_30", bundle: ..., traitCollection: ...)`
    static func ic_comment_30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment_30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_comment_3_appbar", bundle: ..., traitCollection: ...)`
    static func ic_comment_3_appbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment_3_appbar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_comment_40", bundle: ..., traitCollection: ...)`
    static func ic_comment_40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment_40, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_comment_40-1", bundle: ..., traitCollection: ...)`
    static func ic_comment_401(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment_401, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_comment_40-2", bundle: ..., traitCollection: ...)`
    static func ic_comment_402(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment_402, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_comment_40_pressed", bundle: ..., traitCollection: ...)`
    static func ic_comment_40_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment_40_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_comment_40_pressed-1", bundle: ..., traitCollection: ...)`
    static func ic_comment_40_pressed1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment_40_pressed1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_comment_4_appbar", bundle: ..., traitCollection: ...)`
    static func ic_comment_4_appbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment_4_appbar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_copy", bundle: ..., traitCollection: ...)`
    static func ic_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_copy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_copy-1", bundle: ..., traitCollection: ...)`
    static func ic_copy1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_copy1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_discover_find", bundle: ..., traitCollection: ...)`
    static func ic_discover_find(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_discover_find, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_discover_find-1", bundle: ..., traitCollection: ...)`
    static func ic_discover_find1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_discover_find1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_discover_gist", bundle: ..., traitCollection: ...)`
    static func ic_discover_gist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_discover_gist, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_discover_git", bundle: ..., traitCollection: ...)`
    static func ic_discover_git(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_discover_git, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_discover_nearby", bundle: ..., traitCollection: ...)`
    static func ic_discover_nearby(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_discover_nearby, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_discover_scan", bundle: ..., traitCollection: ...)`
    static func ic_discover_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_discover_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_discover_shake", bundle: ..., traitCollection: ...)`
    static func ic_discover_shake(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_discover_shake, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_discover_softwares", bundle: ..., traitCollection: ...)`
    static func ic_discover_softwares(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_discover_softwares, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_documents", bundle: ..., traitCollection: ...)`
    static func ic_documents(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_documents, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_fav_light_normall", bundle: ..., traitCollection: ...)`
    static func ic_fav_light_normall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fav_light_normall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_fav_normal", bundle: ..., traitCollection: ...)`
    static func ic_fav_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fav_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_fav_pressed", bundle: ..., traitCollection: ...)`
    static func ic_fav_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fav_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_faved_normal", bundle: ..., traitCollection: ...)`
    static func ic_faved_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_faved_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_faved_pressed", bundle: ..., traitCollection: ...)`
    static func ic_faved_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_faved_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_female", bundle: ..., traitCollection: ...)`
    static func ic_female(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_female, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_file", bundle: ..., traitCollection: ...)`
    static func ic_file(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_folder", bundle: ..., traitCollection: ...)`
    static func ic_folder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_folder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_fork", bundle: ..., traitCollection: ...)`
    static func ic_fork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fork, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_align", bundle: ..., traitCollection: ...)`
    static func ic_format_align(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_align, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_align_center", bundle: ..., traitCollection: ...)`
    static func ic_format_align_center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_align_center, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_align_left", bundle: ..., traitCollection: ...)`
    static func ic_format_align_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_align_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_align_right", bundle: ..., traitCollection: ...)`
    static func ic_format_align_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_align_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_bold", bundle: ..., traitCollection: ...)`
    static func ic_format_bold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_bold, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_catgory", bundle: ..., traitCollection: ...)`
    static func ic_format_catgory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_catgory, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_catgory_highlight", bundle: ..., traitCollection: ...)`
    static func ic_format_catgory_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_catgory_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_h1", bundle: ..., traitCollection: ...)`
    static func ic_format_h1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_h1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_h2", bundle: ..., traitCollection: ...)`
    static func ic_format_h2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_h2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_h3", bundle: ..., traitCollection: ...)`
    static func ic_format_h3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_h3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_headline", bundle: ..., traitCollection: ...)`
    static func ic_format_headline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_headline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_italic", bundle: ..., traitCollection: ...)`
    static func ic_format_italic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_italic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_keyboard", bundle: ..., traitCollection: ...)`
    static func ic_format_keyboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_keyboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_line", bundle: ..., traitCollection: ...)`
    static func ic_format_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_format_style", bundle: ..., traitCollection: ...)`
    static func ic_format_style(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_format_style, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_label_new", bundle: ..., traitCollection: ...)`
    static func ic_label_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_label_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_label_originate", bundle: ..., traitCollection: ...)`
    static func ic_label_originate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_label_originate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_label_recommend", bundle: ..., traitCollection: ...)`
    static func ic_label_recommend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_label_recommend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_label_reprint", bundle: ..., traitCollection: ...)`
    static func ic_label_reprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_label_reprint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_label_today", bundle: ..., traitCollection: ...)`
    static func ic_label_today(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_label_today, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_located", bundle: ..., traitCollection: ...)`
    static func ic_located(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_located, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_location", bundle: ..., traitCollection: ...)`
    static func ic_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_login_3party_qq", bundle: ..., traitCollection: ...)`
    static func ic_login_3party_qq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_3party_qq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_login_3party_wechat", bundle: ..., traitCollection: ...)`
    static func ic_login_3party_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_3party_wechat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_login_3party_weibo", bundle: ..., traitCollection: ...)`
    static func ic_login_3party_weibo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_3party_weibo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_login_password", bundle: ..., traitCollection: ...)`
    static func ic_login_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_login_username", bundle: ..., traitCollection: ...)`
    static func ic_login_username(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_username, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo_3party_csdn", bundle: ..., traitCollection: ...)`
    static func ic_logo_3party_csdn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo_3party_csdn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_male", bundle: ..., traitCollection: ...)`
    static func ic_male(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_male, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_more_normal", bundle: ..., traitCollection: ...)`
    static func ic_more_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_blog", bundle: ..., traitCollection: ...)`
    static func ic_my_blog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_blog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_event", bundle: ..., traitCollection: ...)`
    static func ic_my_event(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_event, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_messege", bundle: ..., traitCollection: ...)`
    static func ic_my_messege(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_messege, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_profile", bundle: ..., traitCollection: ...)`
    static func ic_my_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_question", bundle: ..., traitCollection: ...)`
    static func ic_my_question(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_question, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_setting", bundle: ..., traitCollection: ...)`
    static func ic_my_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_team", bundle: ..., traitCollection: ...)`
    static func ic_my_team(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_team, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_nav_add", bundle: ..., traitCollection: ...)`
    static func ic_nav_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_nav_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_nav_add_actived", bundle: ..., traitCollection: ...)`
    static func ic_nav_add_actived(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_nav_add_actived, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pm_file", bundle: ..., traitCollection: ...)`
    static func ic_pm_file(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pm_file, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_quote", bundle: ..., traitCollection: ...)`
    static func ic_quote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_quote, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_quote_left", bundle: ..., traitCollection: ...)`
    static func ic_quote_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_quote_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_quote_right", bundle: ..., traitCollection: ...)`
    static func ic_quote_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_quote_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_shake", bundle: ..., traitCollection: ...)`
    static func ic_shake(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_shake, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_black_normal", bundle: ..., traitCollection: ...)`
    static func ic_share_black_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_black_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_black_normal-1", bundle: ..., traitCollection: ...)`
    static func ic_share_black_normal1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_black_normal1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_black_normal-2", bundle: ..., traitCollection: ...)`
    static func ic_share_black_normal2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_black_normal2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_black_normal-3", bundle: ..., traitCollection: ...)`
    static func ic_share_black_normal3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_black_normal3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_black_pressed", bundle: ..., traitCollection: ...)`
    static func ic_share_black_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_black_pressed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_black_pressed-1", bundle: ..., traitCollection: ...)`
    static func ic_share_black_pressed1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_black_pressed1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_black_pressed-2", bundle: ..., traitCollection: ...)`
    static func ic_share_black_pressed2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_black_pressed2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_black_pressed-3", bundle: ..., traitCollection: ...)`
    static func ic_share_black_pressed3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_black_pressed3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_signup_captcha", bundle: ..., traitCollection: ...)`
    static func ic_signup_captcha(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_signup_captcha, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_signup_sms", bundle: ..., traitCollection: ...)`
    static func ic_signup_sms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_signup_sms, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_singup_mobile", bundle: ..., traitCollection: ...)`
    static func ic_singup_mobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_singup_mobile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star", bundle: ..., traitCollection: ...)`
    static func ic_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_subscribe", bundle: ..., traitCollection: ...)`
    static func ic_subscribe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_subscribe, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_thumbup_actived", bundle: ..., traitCollection: ...)`
    static func ic_thumbup_actived(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_thumbup_actived, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_thumbup_normal", bundle: ..., traitCollection: ...)`
    static func ic_thumbup_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_thumbup_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_ticket", bundle: ..., traitCollection: ...)`
    static func ic_ticket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ticket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tip_fail", bundle: ..., traitCollection: ...)`
    static func ic_tip_fail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tip_fail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tip_smile", bundle: ..., traitCollection: ...)`
    static func ic_tip_smile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tip_smile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tweet_add", bundle: ..., traitCollection: ...)`
    static func ic_tweet_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tweet_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unsubscribe", bundle: ..., traitCollection: ...)`
    static func ic_unsubscribe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unsubscribe, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_user_add", bundle: ..., traitCollection: ...)`
    static func ic_user_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_user_add-1", bundle: ..., traitCollection: ...)`
    static func ic_user_add1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_add1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_view", bundle: ..., traitCollection: ...)`
    static func ic_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_view, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_vote", bundle: ..., traitCollection: ...)`
    static func ic_vote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vote, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_vote_down", bundle: ..., traitCollection: ...)`
    static func ic_vote_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vote_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_vote_down_big_actived", bundle: ..., traitCollection: ...)`
    static func ic_vote_down_big_actived(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vote_down_big_actived, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_vote_down_big_normal", bundle: ..., traitCollection: ...)`
    static func ic_vote_down_big_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vote_down_big_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_vote_up", bundle: ..., traitCollection: ...)`
    static func ic_vote_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vote_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_vote_up_big_actived", bundle: ..., traitCollection: ...)`
    static func ic_vote_up_big_actived(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vote_up_big_actived, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_vote_up_big_normal", bundle: ..., traitCollection: ...)`
    static func ic_vote_up_big_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vote_up_big_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_website", bundle: ..., traitCollection: ...)`
    static func ic_website(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_website, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_event_status_attend", bundle: ..., traitCollection: ...)`
    static func icon_event_status_attend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_event_status_attend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_event_status_checked", bundle: ..., traitCollection: ...)`
    static func icon_event_status_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_event_status_checked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_event_status_over", bundle: ..., traitCollection: ...)`
    static func icon_event_status_over(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_event_status_over, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_add_sel", bundle: ..., traitCollection: ...)`
    static func image_add_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_add_sel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_icon", bundle: ..., traitCollection: ...)`
    static func img_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ios_120", bundle: ..., traitCollection: ...)`
    static func ios_120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ios_120, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "label_best_answer", bundle: ..., traitCollection: ...)`
    static func label_best_answer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.label_best_answer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "language", bundle: ..., traitCollection: ...)`
    static func language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.language, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loading", bundle: ..., traitCollection: ...)`
    static func loading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loading, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loading_1", bundle: ..., traitCollection: ...)`
    static func loading_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loading_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loading_2", bundle: ..., traitCollection: ...)`
    static func loading_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loading_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loading_3", bundle: ..., traitCollection: ...)`
    static func loading_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loading_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_osc", bundle: ..., traitCollection: ...)`
    static func logo_osc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_osc, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_osc_share", bundle: ..., traitCollection: ...)`
    static func logo_osc_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_osc_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_software_default", bundle: ..., traitCollection: ...)`
    static func logo_software_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_software_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "me-blog", bundle: ..., traitCollection: ...)`
    static func meBlog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meBlog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "me-feedback", bundle: ..., traitCollection: ...)`
    static func meFeedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meFeedback, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "me-message", bundle: ..., traitCollection: ...)`
    static func meMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meMessage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "me-team", bundle: ..., traitCollection: ...)`
    static func meTeam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meTeam, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar-search", bundle: ..., traitCollection: ...)`
    static func navigationbarSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbarSearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar-sidebar", bundle: ..., traitCollection: ...)`
    static func navigationbarSidebar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbarSidebar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "neckbeard", bundle: ..., traitCollection: ...)`
    static func neckbeard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.neckbeard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "octocat", bundle: ..., traitCollection: ...)`
    static func octocat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.octocat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "overlaygraphic", bundle: ..., traitCollection: ...)`
    static func overlaygraphic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.overlaygraphic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "page_icon_empty", bundle: ..., traitCollection: ...)`
    static func page_icon_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.page_icon_empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "picture_download", bundle: ..., traitCollection: ...)`
    static func picture_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.picture_download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "portrait_loading", bundle: ..., traitCollection: ...)`
    static func portrait_loading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.portrait_loading, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "post_icon", bundle: ..., traitCollection: ...)`
    static func post_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qq-icon", bundle: ..., traitCollection: ...)`
    static func qqIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qqIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode", bundle: ..., traitCollection: ...)`
    static func qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "radiobox_off", bundle: ..., traitCollection: ...)`
    static func radiobox_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radiobox_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "radiobox_on", bundle: ..., traitCollection: ...)`
    static func radiobox_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radiobox_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rage1", bundle: ..., traitCollection: ...)`
    static func rage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rage1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rage2", bundle: ..., traitCollection: ...)`
    static func rage2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rage2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rage3", bundle: ..., traitCollection: ...)`
    static func rage3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rage3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rage4", bundle: ..., traitCollection: ...)`
    static func rage4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rage4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "send", bundle: ..., traitCollection: ...)`
    static func send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shake", bundle: ..., traitCollection: ...)`
    static func shake(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shake, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shaking", bundle: ..., traitCollection: ...)`
    static func shaking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shaking, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sidemenu-day", bundle: ..., traitCollection: ...)`
    static func sidemenuDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sidemenuDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sidemenu-night", bundle: ..., traitCollection: ...)`
    static func sidemenuNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sidemenuNight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sidemenu-software", bundle: ..., traitCollection: ...)`
    static func sidemenuSoftware(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sidemenuSoftware, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sidemenu_QA", bundle: ..., traitCollection: ...)`
    static func sidemenu_QA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sidemenu_QA, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sidemenu_blog", bundle: ..., traitCollection: ...)`
    static func sidemenu_blog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sidemenu_blog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sidemenu_setting", bundle: ..., traitCollection: ...)`
    static func sidemenu_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sidemenu_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "signup_select", bundle: ..., traitCollection: ...)`
    static func signup_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signup_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "squirrel", bundle: ..., traitCollection: ...)`
    static func squirrel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.squirrel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "style_icon", bundle: ..., traitCollection: ...)`
    static func style_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.style_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "suspect", bundle: ..., traitCollection: ...)`
    static func suspect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.suspect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-discover", bundle: ..., traitCollection: ...)`
    static func tabbarDiscover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarDiscover, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-discover-selected", bundle: ..., traitCollection: ...)`
    static func tabbarDiscoverSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarDiscoverSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-me", bundle: ..., traitCollection: ...)`
    static func tabbarMe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMe, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-me-selected", bundle: ..., traitCollection: ...)`
    static func tabbarMeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMeSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-more", bundle: ..., traitCollection: ...)`
    static func tabbarMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMore, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-news", bundle: ..., traitCollection: ...)`
    static func tabbarNews(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarNews, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-news-selected", bundle: ..., traitCollection: ...)`
    static func tabbarNewsSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarNewsSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-tweet", bundle: ..., traitCollection: ...)`
    static func tabbarTweet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarTweet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar-tweet-selected", bundle: ..., traitCollection: ...)`
    static func tabbarTweetSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarTweetSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "team-creaete", bundle: ..., traitCollection: ...)`
    static func teamCreaete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.teamCreaete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "team-create", bundle: ..., traitCollection: ...)`
    static func teamCreate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.teamCreate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tips_subscribe", bundle: ..., traitCollection: ...)`
    static func tips_subscribe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tips_subscribe, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-barSwitch", bundle: ..., traitCollection: ...)`
    static func toolbarBarSwitch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarBarSwitch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-comments", bundle: ..., traitCollection: ...)`
    static func toolbarComments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarComments, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-editingComment", bundle: ..., traitCollection: ...)`
    static func toolbarEditingComment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarEditingComment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-emoji", bundle: ..., traitCollection: ...)`
    static func toolbarEmoji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarEmoji, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-emoji2", bundle: ..., traitCollection: ...)`
    static func toolbarEmoji2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarEmoji2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-image", bundle: ..., traitCollection: ...)`
    static func toolbarImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-image_enable", bundle: ..., traitCollection: ...)`
    static func toolbarImage_enable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarImage_enable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-keyboardUp", bundle: ..., traitCollection: ...)`
    static func toolbarKeyboardUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarKeyboardUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-mention", bundle: ..., traitCollection: ...)`
    static func toolbarMention(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarMention, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-reference", bundle: ..., traitCollection: ...)`
    static func toolbarReference(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarReference, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-report", bundle: ..., traitCollection: ...)`
    static func toolbarReport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarReport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-separatorline", bundle: ..., traitCollection: ...)`
    static func toolbarSeparatorline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarSeparatorline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-share", bundle: ..., traitCollection: ...)`
    static func toolbarShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarShare, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-star", bundle: ..., traitCollection: ...)`
    static func toolbarStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarStar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-starred", bundle: ..., traitCollection: ...)`
    static func toolbarStarred(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarStarred, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-text", bundle: ..., traitCollection: ...)`
    static func toolbarText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarText, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trollface", bundle: ..., traitCollection: ...)`
    static func trollface(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trollface, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user-background", bundle: ..., traitCollection: ...)`
    static func userBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user-background-320", bundle: ..., traitCollection: ...)`
    static func userBackground320(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userBackground320, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user-background-320-dark", bundle: ..., traitCollection: ...)`
    static func userBackground320Dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userBackground320Dark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user-background-375", bundle: ..., traitCollection: ...)`
    static func userBackground375(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userBackground375, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user-background-375-dark", bundle: ..., traitCollection: ...)`
    static func userBackground375Dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userBackground375Dark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user-background-dark", bundle: ..., traitCollection: ...)`
    static func userBackgroundDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userBackgroundDark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "userinfo_icon_female", bundle: ..., traitCollection: ...)`
    static func userinfo_icon_female(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userinfo_icon_female, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "userinfo_icon_male", bundle: ..., traitCollection: ...)`
    static func userinfo_icon_male(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userinfo_icon_male, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice_0", bundle: ..., traitCollection: ...)`
    static func voice_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice_1", bundle: ..., traitCollection: ...)`
    static func voice_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice_2", bundle: ..., traitCollection: ...)`
    static func voice_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice_3", bundle: ..., traitCollection: ...)`
    static func voice_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice_delete", bundle: ..., traitCollection: ...)`
    static func voice_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice_pause", bundle: ..., traitCollection: ...)`
    static func voice_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_pause, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice_play", bundle: ..., traitCollection: ...)`
    static func voice_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "voice_record", bundle: ..., traitCollection: ...)`
    static func voice_record(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_record, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "watch", bundle: ..., traitCollection: ...)`
    static func watch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wechat-icon", bundle: ..., traitCollection: ...)`
    static func wechatIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wechatIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "weibo-icon", bundle: ..., traitCollection: ...)`
    static func weiboIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weiboIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "widget-original", bundle: ..., traitCollection: ...)`
    static func widgetOriginal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.widgetOriginal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "widget_repost", bundle: ..., traitCollection: ...)`
    static func widget_repost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.widget_repost, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "widget_taday", bundle: ..., traitCollection: ...)`
    static func widget_taday(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.widget_taday, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `HomeButtonCell`.
    static let homeButtonCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "HomeButtonCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `Discover`.
    static let discover = _R.storyboard.discover()
    /// Storyboard `Homepage`.
    static let homepage = _R.storyboard.homepage()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Discover", bundle: ...)`
    static func discover(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.discover)
    }
    
    /// `UIStoryboard(name: "Homepage", bundle: ...)`
    static func homepage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homepage)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try login.validate()
      try discover.validate()
      try homepage.validate()
    }
    
    struct discover: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Discover"
      let nav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Nav")
      
      func nav(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nav)
      }
      
      static func validate() throws {
        if _R.storyboard.discover().nav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nav' could not be loaded from storyboard 'Discover' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct homepage: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Homepage"
      let nav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Nav")
      
      func nav(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nav)
      }
      
      static func validate() throws {
        if _R.storyboard.homepage().nav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nav' could not be loaded from storyboard 'Homepage' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"
      let registerInfoViewController = StoryboardViewControllerResource<RegisterInfoViewController>(identifier: "RegisterInfoViewController")
      let resetPWViewController = StoryboardViewControllerResource<ResetPWViewController>(identifier: "ResetPWViewController")
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func registerInfoViewController(_: Void = ()) -> RegisterInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerInfoViewController)
      }
      
      func resetPWViewController(_: Void = ()) -> ResetPWViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPWViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_gender_female_normal") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_gender_female_normal' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_login") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_login' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_signup_sms") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_signup_sms' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_3party_qq") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_3party_qq' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo_3party_csdn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo_3party_csdn' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_gender_male_actived") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_gender_male_actived' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_singup_mobile") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_singup_mobile' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_back_normal") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_back_normal' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_password") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_password' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_3party_weibo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_3party_weibo' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_osc") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_osc' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_3party_wechat") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_3party_wechat' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_login_thirdpart") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_login_thirdpart' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_username") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_username' is used in storyboard 'Login', but couldn't be loaded.") }
        if _R.storyboard.login().registerInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerInfoViewController' could not be loaded from storyboard 'Login' as 'RegisterInfoViewController'.") }
        if _R.storyboard.login().resetPWViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPWViewController' could not be loaded from storyboard 'Login' as 'ResetPWViewController'.") }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OSCTabBarController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "tabbar-tweet") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-tweet' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-discover") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-discover' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-me") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-me' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar-news") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar-news' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
